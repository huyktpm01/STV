#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STV.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Nhom6")]
	public partial class dbSTVDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertAuthorR(AuthorR instance);
    partial void UpdateAuthorR(AuthorR instance);
    partial void DeleteAuthorR(AuthorR instance);
    partial void InsertAuthorVIP(AuthorVIP instance);
    partial void UpdateAuthorVIP(AuthorVIP instance);
    partial void DeleteAuthorVIP(AuthorVIP instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertChapter(Chapter instance);
    partial void UpdateChapter(Chapter instance);
    partial void DeleteChapter(Chapter instance);
    partial void InsertFollow(Follow instance);
    partial void UpdateFollow(Follow instance);
    partial void DeleteFollow(Follow instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertHistoryBuy(HistoryBuy instance);
    partial void UpdateHistoryBuy(HistoryBuy instance);
    partial void DeleteHistoryBuy(HistoryBuy instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertReader(Reader instance);
    partial void UpdateReader(Reader instance);
    partial void DeleteReader(Reader instance);
    partial void InsertReaderVIP(ReaderVIP instance);
    partial void UpdateReaderVIP(ReaderVIP instance);
    partial void DeleteReaderVIP(ReaderVIP instance);
    partial void InsertStory(Story instance);
    partial void UpdateStory(Story instance);
    partial void DeleteStory(Story instance);
    partial void InsertReply(Reply instance);
    partial void UpdateReply(Reply instance);
    partial void DeleteReply(Reply instance);
    #endregion
		
		public dbSTVDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbSTVDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbSTVDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbSTVDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<AuthorR> AuthorRs
		{
			get
			{
				return this.GetTable<AuthorR>();
			}
		}
		
		public System.Data.Linq.Table<AuthorVIP> AuthorVIPs
		{
			get
			{
				return this.GetTable<AuthorVIP>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Chapter> Chapters
		{
			get
			{
				return this.GetTable<Chapter>();
			}
		}
		
		public System.Data.Linq.Table<Follow> Follows
		{
			get
			{
				return this.GetTable<Follow>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<HistoryBuy> HistoryBuys
		{
			get
			{
				return this.GetTable<HistoryBuy>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<ReaderConfig> ReaderConfigs
		{
			get
			{
				return this.GetTable<ReaderConfig>();
			}
		}
		
		public System.Data.Linq.Table<Reader> Readers
		{
			get
			{
				return this.GetTable<Reader>();
			}
		}
		
		public System.Data.Linq.Table<ReaderVIP> ReaderVIPs
		{
			get
			{
				return this.GetTable<ReaderVIP>();
			}
		}
		
		public System.Data.Linq.Table<Story> Stories
		{
			get
			{
				return this.GetTable<Story>();
			}
		}
		
		public System.Data.Linq.Table<Recharge> Recharges
		{
			get
			{
				return this.GetTable<Recharge>();
			}
		}
		
		public System.Data.Linq.Table<Reply> Replies
		{
			get
			{
				return this.GetTable<Reply>();
			}
		}
		
		public System.Data.Linq.Table<Withdraw> Withdraws
		{
			get
			{
				return this.GetTable<Withdraw>();
			}
		}
		
		public System.Data.Linq.Table<story_posting_schedule> story_posting_schedules
		{
			get
			{
				return this.GetTable<story_posting_schedule>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdminID;
		
		private string _Biography;
		
		private string _Name;
		
		private string _CatID;
		
		private System.Nullable<int> _MemberID;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    partial void OnBiographyChanging(string value);
    partial void OnBiographyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCatIDChanging(string value);
    partial void OnCatIDChanged();
    partial void OnMemberIDChanging(System.Nullable<int> value);
    partial void OnMemberIDChanged();
    #endregion
		
		public Admin()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Biography", DbType="NVarChar(MAX)")]
		public string Biography
		{
			get
			{
				return this._Biography;
			}
			set
			{
				if ((this._Biography != value))
				{
					this.OnBiographyChanging(value);
					this.SendPropertyChanging();
					this._Biography = value;
					this.SendPropertyChanged("Biography");
					this.OnBiographyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="NChar(10)")]
		public string CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int")]
		public System.Nullable<int> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Admin", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorID;
		
		private System.Nullable<int> _MemberID;
		
		private string _Pen_Name;
		
		private string _Biography;
		
		private System.Nullable<int> _N_O_St;
		
		private System.Nullable<int> _VIPID;
		
		private EntitySet<AuthorR> _AuthorRs;
		
		private EntitySet<Story> _Stories;
		
		private EntityRef<AuthorVIP> _AuthorVIP;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnMemberIDChanging(System.Nullable<int> value);
    partial void OnMemberIDChanged();
    partial void OnPen_NameChanging(string value);
    partial void OnPen_NameChanged();
    partial void OnBiographyChanging(string value);
    partial void OnBiographyChanged();
    partial void OnN_O_StChanging(System.Nullable<int> value);
    partial void OnN_O_StChanged();
    partial void OnVIPIDChanging(System.Nullable<int> value);
    partial void OnVIPIDChanged();
    #endregion
		
		public Author()
		{
			this._AuthorRs = new EntitySet<AuthorR>(new Action<AuthorR>(this.attach_AuthorRs), new Action<AuthorR>(this.detach_AuthorRs));
			this._Stories = new EntitySet<Story>(new Action<Story>(this.attach_Stories), new Action<Story>(this.detach_Stories));
			this._AuthorVIP = default(EntityRef<AuthorVIP>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int")]
		public System.Nullable<int> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pen_Name", DbType="NVarChar(MAX)")]
		public string Pen_Name
		{
			get
			{
				return this._Pen_Name;
			}
			set
			{
				if ((this._Pen_Name != value))
				{
					this.OnPen_NameChanging(value);
					this.SendPropertyChanging();
					this._Pen_Name = value;
					this.SendPropertyChanged("Pen_Name");
					this.OnPen_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Biography", DbType="NVarChar(MAX)")]
		public string Biography
		{
			get
			{
				return this._Biography;
			}
			set
			{
				if ((this._Biography != value))
				{
					this.OnBiographyChanging(value);
					this.SendPropertyChanging();
					this._Biography = value;
					this.SendPropertyChanged("Biography");
					this.OnBiographyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_N_O_St", DbType="Int")]
		public System.Nullable<int> N_O_St
		{
			get
			{
				return this._N_O_St;
			}
			set
			{
				if ((this._N_O_St != value))
				{
					this.OnN_O_StChanging(value);
					this.SendPropertyChanging();
					this._N_O_St = value;
					this.SendPropertyChanged("N_O_St");
					this.OnN_O_StChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPID", DbType="Int")]
		public System.Nullable<int> VIPID
		{
			get
			{
				return this._VIPID;
			}
			set
			{
				if ((this._VIPID != value))
				{
					if (this._AuthorVIP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVIPIDChanging(value);
					this.SendPropertyChanging();
					this._VIPID = value;
					this.SendPropertyChanged("VIPID");
					this.OnVIPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_AuthorR", Storage="_AuthorRs", ThisKey="AuthorID", OtherKey="AuthorID")]
		public EntitySet<AuthorR> AuthorRs
		{
			get
			{
				return this._AuthorRs;
			}
			set
			{
				this._AuthorRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Story", Storage="_Stories", ThisKey="AuthorID", OtherKey="AuthorID")]
		public EntitySet<Story> Stories
		{
			get
			{
				return this._Stories;
			}
			set
			{
				this._Stories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuthorVIP_Author", Storage="_AuthorVIP", ThisKey="VIPID", OtherKey="VIPID", IsForeignKey=true)]
		public AuthorVIP AuthorVIP
		{
			get
			{
				return this._AuthorVIP.Entity;
			}
			set
			{
				AuthorVIP previousValue = this._AuthorVIP.Entity;
				if (((previousValue != value) 
							|| (this._AuthorVIP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuthorVIP.Entity = null;
						previousValue.Authors.Remove(this);
					}
					this._AuthorVIP.Entity = value;
					if ((value != null))
					{
						value.Authors.Add(this);
						this._VIPID = value.VIPID;
					}
					else
					{
						this._VIPID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AuthorVIP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Author", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Authors.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Authors.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorRs(AuthorR entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_AuthorRs(AuthorR entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
		
		private void attach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthorR")]
	public partial class AuthorR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorRID;
		
		private System.Nullable<int> _AuthorID;
		
		private System.Nullable<int> _StoryID;
		
		private System.Nullable<float> _Money;
		
		private System.Nullable<System.DateTime> _DayUpdate;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Story> _Story;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorRIDChanging(int value);
    partial void OnAuthorRIDChanged();
    partial void OnAuthorIDChanging(System.Nullable<int> value);
    partial void OnAuthorIDChanged();
    partial void OnStoryIDChanging(System.Nullable<int> value);
    partial void OnStoryIDChanged();
    partial void OnMoneyChanging(System.Nullable<float> value);
    partial void OnMoneyChanged();
    partial void OnDayUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDayUpdateChanged();
    #endregion
		
		public AuthorR()
		{
			this._Author = default(EntityRef<Author>);
			this._Story = default(EntityRef<Story>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorRID
		{
			get
			{
				return this._AuthorRID;
			}
			set
			{
				if ((this._AuthorRID != value))
				{
					this.OnAuthorRIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorRID = value;
					this.SendPropertyChanged("AuthorRID");
					this.OnAuthorRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int")]
		public System.Nullable<int> AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", DbType="Int")]
		public System.Nullable<int> StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Real")]
		public System.Nullable<float> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayUpdate", DbType="Date")]
		public System.Nullable<System.DateTime> DayUpdate
		{
			get
			{
				return this._DayUpdate;
			}
			set
			{
				if ((this._DayUpdate != value))
				{
					this.OnDayUpdateChanging(value);
					this.SendPropertyChanging();
					this._DayUpdate = value;
					this.SendPropertyChanged("DayUpdate");
					this.OnDayUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_AuthorR", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.AuthorRs.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.AuthorRs.Add(this);
						this._AuthorID = value.AuthorID;
					}
					else
					{
						this._AuthorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Story_AuthorR", Storage="_Story", ThisKey="StoryID", OtherKey="StoryID", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.AuthorRs.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.AuthorRs.Add(this);
						this._StoryID = value.StoryID;
					}
					else
					{
						this._StoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthorVIP")]
	public partial class AuthorVIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VIPID;
		
		private string _Name;
		
		private System.Nullable<int> _Sale;
		
		private System.Nullable<int> _DK;
		
		private EntitySet<Author> _Authors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIPIDChanging(int value);
    partial void OnVIPIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSaleChanging(System.Nullable<int> value);
    partial void OnSaleChanged();
    partial void OnDKChanging(System.Nullable<int> value);
    partial void OnDKChanged();
    #endregion
		
		public AuthorVIP()
		{
			this._Authors = new EntitySet<Author>(new Action<Author>(this.attach_Authors), new Action<Author>(this.detach_Authors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VIPID
		{
			get
			{
				return this._VIPID;
			}
			set
			{
				if ((this._VIPID != value))
				{
					this.OnVIPIDChanging(value);
					this.SendPropertyChanging();
					this._VIPID = value;
					this.SendPropertyChanged("VIPID");
					this.OnVIPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale", DbType="Int")]
		public System.Nullable<int> Sale
		{
			get
			{
				return this._Sale;
			}
			set
			{
				if ((this._Sale != value))
				{
					this.OnSaleChanging(value);
					this.SendPropertyChanging();
					this._Sale = value;
					this.SendPropertyChanged("Sale");
					this.OnSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DK", DbType="Int")]
		public System.Nullable<int> DK
		{
			get
			{
				return this._DK;
			}
			set
			{
				if ((this._DK != value))
				{
					this.OnDKChanging(value);
					this.SendPropertyChanging();
					this._DK = value;
					this.SendPropertyChanged("DK");
					this.OnDKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuthorVIP_Author", Storage="_Authors", ThisKey="VIPID", OtherKey="VIPID")]
		public EntitySet<Author> Authors
		{
			get
			{
				return this._Authors;
			}
			set
			{
				this._Authors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Authors(Author entity)
		{
			this.SendPropertyChanging();
			entity.AuthorVIP = this;
		}
		
		private void detach_Authors(Author entity)
		{
			this.SendPropertyChanging();
			entity.AuthorVIP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatID;
		
		private string _CatName;
		
		private System.Nullable<int> _Number_of_cat;
		
		private System.Nullable<bool> _Hot;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Nullable<System.DateTime> _CreateAt;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private EntitySet<Story> _Stories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    partial void OnNumber_of_catChanging(System.Nullable<int> value);
    partial void OnNumber_of_catChanged();
    partial void OnHotChanging(System.Nullable<bool> value);
    partial void OnHotChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnCreateAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateAtChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public category()
		{
			this._Stories = new EntitySet<Story>(new Action<Story>(this.attach_Stories), new Action<Story>(this.detach_Stories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatName", DbType="NVarChar(250)")]
		public string CatName
		{
			get
			{
				return this._CatName;
			}
			set
			{
				if ((this._CatName != value))
				{
					this.OnCatNameChanging(value);
					this.SendPropertyChanging();
					this._CatName = value;
					this.SendPropertyChanged("CatName");
					this.OnCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number_of_cat", DbType="Int")]
		public System.Nullable<int> Number_of_cat
		{
			get
			{
				return this._Number_of_cat;
			}
			set
			{
				if ((this._Number_of_cat != value))
				{
					this.OnNumber_of_catChanging(value);
					this.SendPropertyChanging();
					this._Number_of_cat = value;
					this.SendPropertyChanged("Number_of_cat");
					this.OnNumber_of_catChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hot", DbType="Bit")]
		public System.Nullable<bool> Hot
		{
			get
			{
				return this._Hot;
			}
			set
			{
				if ((this._Hot != value))
				{
					this.OnHotChanging(value);
					this.SendPropertyChanging();
					this._Hot = value;
					this.SendPropertyChanged("Hot");
					this.OnHotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateAt", DbType="Date")]
		public System.Nullable<System.DateTime> CreateAt
		{
			get
			{
				return this._CreateAt;
			}
			set
			{
				if ((this._CreateAt != value))
				{
					this.OnCreateAtChanging(value);
					this.SendPropertyChanging();
					this._CreateAt = value;
					this.SendPropertyChanged("CreateAt");
					this.OnCreateAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="Date")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_Story", Storage="_Stories", ThisKey="CatID", OtherKey="CatID")]
		public EntitySet<Story> Stories
		{
			get
			{
				return this._Stories;
			}
			set
			{
				this._Stories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private System.Nullable<int> _ReaderID;
		
		private System.Nullable<int> _StoryID;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private EntitySet<Reply> _Replies;
		
		private EntityRef<Reader> _Reader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnReaderIDChanging(System.Nullable<int> value);
    partial void OnReaderIDChanged();
    partial void OnStoryIDChanging(System.Nullable<int> value);
    partial void OnStoryIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishDateChanged();
    #endregion
		
		public Comment()
		{
			this._Replies = new EntitySet<Reply>(new Action<Reply>(this.attach_Replies), new Action<Reply>(this.detach_Replies));
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", DbType="Int")]
		public System.Nullable<int> StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="Date")]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Reply", Storage="_Replies", ThisKey="CommentID", OtherKey="CommentID")]
		public EntitySet<Reply> Replies
		{
			get
			{
				return this._Replies;
			}
			set
			{
				this._Replies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Comment", Storage="_Reader", ThisKey="ReaderID", OtherKey="ReaderID", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ReaderID = value.ReaderID;
					}
					else
					{
						this._ReaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chapter")]
	public partial class Chapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChapterID;
		
		private System.Nullable<int> _StoryID;
		
		private System.Nullable<int> _Chapter_Number;
		
		private string _Title;
		
		private string _Content;
		
		private string _N_O_W;
		
		private System.Nullable<int> _View;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<System.DateTime> _Pushlishdate;
		
		private System.Nullable<int> _status;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private System.Nullable<bool> _Vip;
		
		private System.Nullable<float> _Money;
		
		private System.Nullable<int> _sold;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<HistoryBuy> _HistoryBuys;
		
		private EntityRef<Story> _Story;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChapterIDChanging(int value);
    partial void OnChapterIDChanged();
    partial void OnStoryIDChanging(System.Nullable<int> value);
    partial void OnStoryIDChanged();
    partial void OnChapter_NumberChanging(System.Nullable<int> value);
    partial void OnChapter_NumberChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnN_O_WChanging(string value);
    partial void OnN_O_WChanged();
    partial void OnViewChanging(System.Nullable<int> value);
    partial void OnViewChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnPushlishdateChanging(System.Nullable<System.DateTime> value);
    partial void OnPushlishdateChanged();
    partial void OnstatusChanging(System.Nullable<int> value);
    partial void OnstatusChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    partial void OnVipChanging(System.Nullable<bool> value);
    partial void OnVipChanged();
    partial void OnMoneyChanging(System.Nullable<float> value);
    partial void OnMoneyChanged();
    partial void OnsoldChanging(System.Nullable<int> value);
    partial void OnsoldChanged();
    #endregion
		
		public Chapter()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._HistoryBuys = new EntitySet<HistoryBuy>(new Action<HistoryBuy>(this.attach_HistoryBuys), new Action<HistoryBuy>(this.detach_HistoryBuys));
			this._Story = default(EntityRef<Story>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChapterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChapterID
		{
			get
			{
				return this._ChapterID;
			}
			set
			{
				if ((this._ChapterID != value))
				{
					this.OnChapterIDChanging(value);
					this.SendPropertyChanging();
					this._ChapterID = value;
					this.SendPropertyChanged("ChapterID");
					this.OnChapterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", DbType="Int")]
		public System.Nullable<int> StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chapter_Number", DbType="Int")]
		public System.Nullable<int> Chapter_Number
		{
			get
			{
				return this._Chapter_Number;
			}
			set
			{
				if ((this._Chapter_Number != value))
				{
					this.OnChapter_NumberChanging(value);
					this.SendPropertyChanging();
					this._Chapter_Number = value;
					this.SendPropertyChanged("Chapter_Number");
					this.OnChapter_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_N_O_W", DbType="NVarChar(MAX)")]
		public string N_O_W
		{
			get
			{
				return this._N_O_W;
			}
			set
			{
				if ((this._N_O_W != value))
				{
					this.OnN_O_WChanging(value);
					this.SendPropertyChanging();
					this._N_O_W = value;
					this.SendPropertyChanged("N_O_W");
					this.OnN_O_WChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[View]", Storage="_View", DbType="Int")]
		public System.Nullable<int> View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this.OnViewChanging(value);
					this.SendPropertyChanging();
					this._View = value;
					this.SendPropertyChanged("View");
					this.OnViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pushlishdate", DbType="Date")]
		public System.Nullable<System.DateTime> Pushlishdate
		{
			get
			{
				return this._Pushlishdate;
			}
			set
			{
				if ((this._Pushlishdate != value))
				{
					this.OnPushlishdateChanging(value);
					this.SendPropertyChanging();
					this._Pushlishdate = value;
					this.SendPropertyChanged("Pushlishdate");
					this.OnPushlishdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int")]
		public System.Nullable<int> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="Date")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vip", DbType="Bit")]
		public System.Nullable<bool> Vip
		{
			get
			{
				return this._Vip;
			}
			set
			{
				if ((this._Vip != value))
				{
					this.OnVipChanging(value);
					this.SendPropertyChanging();
					this._Vip = value;
					this.SendPropertyChanged("Vip");
					this.OnVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Real")]
		public System.Nullable<float> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sold", DbType="Int")]
		public System.Nullable<int> sold
		{
			get
			{
				return this._sold;
			}
			set
			{
				if ((this._sold != value))
				{
					this.OnsoldChanging(value);
					this.SendPropertyChanging();
					this._sold = value;
					this.SendPropertyChanged("sold");
					this.OnsoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chapter_History", Storage="_Histories", ThisKey="ChapterID", OtherKey="ChapterID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chapter_HistoryBuy", Storage="_HistoryBuys", ThisKey="ChapterID", OtherKey="ChapterID")]
		public EntitySet<HistoryBuy> HistoryBuys
		{
			get
			{
				return this._HistoryBuys;
			}
			set
			{
				this._HistoryBuys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Story_Chapter", Storage="_Story", ThisKey="StoryID", OtherKey="StoryID", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.Chapters.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.Chapters.Add(this);
						this._StoryID = value.StoryID;
					}
					else
					{
						this._StoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = null;
		}
		
		private void attach_HistoryBuys(HistoryBuy entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = this;
		}
		
		private void detach_HistoryBuys(HistoryBuy entity)
		{
			this.SendPropertyChanging();
			entity.Chapter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Follow")]
	public partial class Follow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FollowID;
		
		private System.Nullable<int> _ReaderID;
		
		private System.Nullable<int> _StoryID;
		
		private System.Nullable<System.DateTime> _FollowDate;
		
		private EntityRef<Reader> _Reader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFollowIDChanging(int value);
    partial void OnFollowIDChanged();
    partial void OnReaderIDChanging(System.Nullable<int> value);
    partial void OnReaderIDChanged();
    partial void OnStoryIDChanging(System.Nullable<int> value);
    partial void OnStoryIDChanged();
    partial void OnFollowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFollowDateChanged();
    #endregion
		
		public Follow()
		{
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FollowID
		{
			get
			{
				return this._FollowID;
			}
			set
			{
				if ((this._FollowID != value))
				{
					this.OnFollowIDChanging(value);
					this.SendPropertyChanging();
					this._FollowID = value;
					this.SendPropertyChanged("FollowID");
					this.OnFollowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", DbType="Int")]
		public System.Nullable<int> StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowDate", DbType="Date")]
		public System.Nullable<System.DateTime> FollowDate
		{
			get
			{
				return this._FollowDate;
			}
			set
			{
				if ((this._FollowDate != value))
				{
					this.OnFollowDateChanging(value);
					this.SendPropertyChanging();
					this._FollowDate = value;
					this.SendPropertyChanged("FollowDate");
					this.OnFollowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Follow", Storage="_Reader", ThisKey="ReaderID", OtherKey="ReaderID", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.Follows.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.Follows.Add(this);
						this._ReaderID = value.ReaderID;
					}
					else
					{
						this._ReaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryID;
		
		private System.Nullable<int> _ReaderID;
		
		private System.Nullable<int> _ChapterID;
		
		private System.Nullable<System.DateTime> _E_Time;
		
		private EntityRef<Chapter> _Chapter;
		
		private EntityRef<Reader> _Reader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryIDChanging(int value);
    partial void OnHistoryIDChanged();
    partial void OnReaderIDChanging(System.Nullable<int> value);
    partial void OnReaderIDChanged();
    partial void OnChapterIDChanging(System.Nullable<int> value);
    partial void OnChapterIDChanged();
    partial void OnE_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnE_TimeChanged();
    #endregion
		
		public History()
		{
			this._Chapter = default(EntityRef<Chapter>);
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HistoryID
		{
			get
			{
				return this._HistoryID;
			}
			set
			{
				if ((this._HistoryID != value))
				{
					this.OnHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryID = value;
					this.SendPropertyChanged("HistoryID");
					this.OnHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChapterID", DbType="Int")]
		public System.Nullable<int> ChapterID
		{
			get
			{
				return this._ChapterID;
			}
			set
			{
				if ((this._ChapterID != value))
				{
					if (this._Chapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChapterIDChanging(value);
					this.SendPropertyChanging();
					this._ChapterID = value;
					this.SendPropertyChanged("ChapterID");
					this.OnChapterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> E_Time
		{
			get
			{
				return this._E_Time;
			}
			set
			{
				if ((this._E_Time != value))
				{
					this.OnE_TimeChanging(value);
					this.SendPropertyChanging();
					this._E_Time = value;
					this.SendPropertyChanged("E_Time");
					this.OnE_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chapter_History", Storage="_Chapter", ThisKey="ChapterID", OtherKey="ChapterID", IsForeignKey=true)]
		public Chapter Chapter
		{
			get
			{
				return this._Chapter.Entity;
			}
			set
			{
				Chapter previousValue = this._Chapter.Entity;
				if (((previousValue != value) 
							|| (this._Chapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chapter.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Chapter.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._ChapterID = value.ChapterID;
					}
					else
					{
						this._ChapterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chapter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_History", Storage="_Reader", ThisKey="ReaderID", OtherKey="ReaderID", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._ReaderID = value.ReaderID;
					}
					else
					{
						this._ReaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoryBuy")]
	public partial class HistoryBuy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChuongVIPID;
		
		private System.Nullable<int> _ReaderID;
		
		private System.Nullable<System.DateTime> _BuyDay;
		
		private System.Nullable<float> _Money;
		
		private System.Nullable<int> _ChapterID;
		
		private EntityRef<Chapter> _Chapter;
		
		private EntityRef<Reader> _Reader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChuongVIPIDChanging(int value);
    partial void OnChuongVIPIDChanged();
    partial void OnReaderIDChanging(System.Nullable<int> value);
    partial void OnReaderIDChanged();
    partial void OnBuyDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBuyDayChanged();
    partial void OnMoneyChanging(System.Nullable<float> value);
    partial void OnMoneyChanged();
    partial void OnChapterIDChanging(System.Nullable<int> value);
    partial void OnChapterIDChanged();
    #endregion
		
		public HistoryBuy()
		{
			this._Chapter = default(EntityRef<Chapter>);
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChuongVIPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChuongVIPID
		{
			get
			{
				return this._ChuongVIPID;
			}
			set
			{
				if ((this._ChuongVIPID != value))
				{
					this.OnChuongVIPIDChanging(value);
					this.SendPropertyChanging();
					this._ChuongVIPID = value;
					this.SendPropertyChanged("ChuongVIPID");
					this.OnChuongVIPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyDay", DbType="Date")]
		public System.Nullable<System.DateTime> BuyDay
		{
			get
			{
				return this._BuyDay;
			}
			set
			{
				if ((this._BuyDay != value))
				{
					this.OnBuyDayChanging(value);
					this.SendPropertyChanging();
					this._BuyDay = value;
					this.SendPropertyChanged("BuyDay");
					this.OnBuyDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Real")]
		public System.Nullable<float> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChapterID", DbType="Int")]
		public System.Nullable<int> ChapterID
		{
			get
			{
				return this._ChapterID;
			}
			set
			{
				if ((this._ChapterID != value))
				{
					if (this._Chapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChapterIDChanging(value);
					this.SendPropertyChanging();
					this._ChapterID = value;
					this.SendPropertyChanged("ChapterID");
					this.OnChapterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chapter_HistoryBuy", Storage="_Chapter", ThisKey="ChapterID", OtherKey="ChapterID", IsForeignKey=true)]
		public Chapter Chapter
		{
			get
			{
				return this._Chapter.Entity;
			}
			set
			{
				Chapter previousValue = this._Chapter.Entity;
				if (((previousValue != value) 
							|| (this._Chapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chapter.Entity = null;
						previousValue.HistoryBuys.Remove(this);
					}
					this._Chapter.Entity = value;
					if ((value != null))
					{
						value.HistoryBuys.Add(this);
						this._ChapterID = value.ChapterID;
					}
					else
					{
						this._ChapterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chapter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_HistoryBuy", Storage="_Reader", ThisKey="ReaderID", OtherKey="ReaderID", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.HistoryBuys.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.HistoryBuys.Add(this);
						this._ReaderID = value.ReaderID;
					}
					else
					{
						this._ReaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _Birth;
		
		private System.Nullable<System.DateTime> _Joindate;
		
		private System.Nullable<int> _A_Level;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _Money;
		
		private System.Data.Linq.Binary _Avatar;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Author> _Authors;
		
		private EntitySet<Reader> _Readers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthChanged();
    partial void OnJoindateChanging(System.Nullable<System.DateTime> value);
    partial void OnJoindateChanged();
    partial void OnA_LevelChanging(System.Nullable<int> value);
    partial void OnA_LevelChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnMoneyChanging(System.Nullable<int> value);
    partial void OnMoneyChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    #endregion
		
		public Member()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Authors = new EntitySet<Author>(new Action<Author>(this.attach_Authors), new Action<Author>(this.detach_Authors));
			this._Readers = new EntitySet<Reader>(new Action<Reader>(this.attach_Readers), new Action<Reader>(this.detach_Readers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth", DbType="Date")]
		public System.Nullable<System.DateTime> Birth
		{
			get
			{
				return this._Birth;
			}
			set
			{
				if ((this._Birth != value))
				{
					this.OnBirthChanging(value);
					this.SendPropertyChanging();
					this._Birth = value;
					this.SendPropertyChanged("Birth");
					this.OnBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Joindate", DbType="Date")]
		public System.Nullable<System.DateTime> Joindate
		{
			get
			{
				return this._Joindate;
			}
			set
			{
				if ((this._Joindate != value))
				{
					this.OnJoindateChanging(value);
					this.SendPropertyChanging();
					this._Joindate = value;
					this.SendPropertyChanged("Joindate");
					this.OnJoindateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_Level", DbType="Int")]
		public System.Nullable<int> A_Level
		{
			get
			{
				return this._A_Level;
			}
			set
			{
				if ((this._A_Level != value))
				{
					this.OnA_LevelChanging(value);
					this.SendPropertyChanging();
					this._A_Level = value;
					this.SendPropertyChanged("A_Level");
					this.OnA_LevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Int")]
		public System.Nullable<int> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Admin", Storage="_Admins", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Author", Storage="_Authors", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Author> Authors
		{
			get
			{
				return this._Authors;
			}
			set
			{
				this._Authors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Reader", Storage="_Readers", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Reader> Readers
		{
			get
			{
				return this._Readers;
			}
			set
			{
				this._Readers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Authors(Author entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Authors(Author entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReaderConfig")]
	public partial class ReaderConfig
	{
		
		private System.Nullable<int> _ReaderID;
		
		private string _Color_Theme;
		
		private string _Color_Word;
		
		private string _Style_Word;
		
		private System.Nullable<int> _Size_Word;
		
		private System.Nullable<float> _Line;
		
		public ReaderConfig()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					this._ReaderID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color_Theme", DbType="VarChar(MAX)")]
		public string Color_Theme
		{
			get
			{
				return this._Color_Theme;
			}
			set
			{
				if ((this._Color_Theme != value))
				{
					this._Color_Theme = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color_Word", DbType="VarChar(MAX)")]
		public string Color_Word
		{
			get
			{
				return this._Color_Word;
			}
			set
			{
				if ((this._Color_Word != value))
				{
					this._Color_Word = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Style_Word", DbType="VarChar(MAX)")]
		public string Style_Word
		{
			get
			{
				return this._Style_Word;
			}
			set
			{
				if ((this._Style_Word != value))
				{
					this._Style_Word = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size_Word", DbType="Int")]
		public System.Nullable<int> Size_Word
		{
			get
			{
				return this._Size_Word;
			}
			set
			{
				if ((this._Size_Word != value))
				{
					this._Size_Word = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="Real")]
		public System.Nullable<float> Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this._Line = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reader")]
	public partial class Reader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReaderID;
		
		private System.Nullable<int> _MemberID;
		
		private string _Name;
		
		private string _Biography;
		
		private System.Nullable<int> _N_O_St;
		
		private System.Nullable<int> _VIPID;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Follow> _Follows;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<HistoryBuy> _HistoryBuys;
		
		private EntitySet<Reply> _Replies;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<ReaderVIP> _ReaderVIP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReaderIDChanging(int value);
    partial void OnReaderIDChanged();
    partial void OnMemberIDChanging(System.Nullable<int> value);
    partial void OnMemberIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBiographyChanging(string value);
    partial void OnBiographyChanged();
    partial void OnN_O_StChanging(System.Nullable<int> value);
    partial void OnN_O_StChanged();
    partial void OnVIPIDChanging(System.Nullable<int> value);
    partial void OnVIPIDChanged();
    #endregion
		
		public Reader()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Follows = new EntitySet<Follow>(new Action<Follow>(this.attach_Follows), new Action<Follow>(this.detach_Follows));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._HistoryBuys = new EntitySet<HistoryBuy>(new Action<HistoryBuy>(this.attach_HistoryBuys), new Action<HistoryBuy>(this.detach_HistoryBuys));
			this._Replies = new EntitySet<Reply>(new Action<Reply>(this.attach_Replies), new Action<Reply>(this.detach_Replies));
			this._Member = default(EntityRef<Member>);
			this._ReaderVIP = default(EntityRef<ReaderVIP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int")]
		public System.Nullable<int> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Biography", DbType="NVarChar(MAX)")]
		public string Biography
		{
			get
			{
				return this._Biography;
			}
			set
			{
				if ((this._Biography != value))
				{
					this.OnBiographyChanging(value);
					this.SendPropertyChanging();
					this._Biography = value;
					this.SendPropertyChanged("Biography");
					this.OnBiographyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_N_O_St", DbType="Int")]
		public System.Nullable<int> N_O_St
		{
			get
			{
				return this._N_O_St;
			}
			set
			{
				if ((this._N_O_St != value))
				{
					this.OnN_O_StChanging(value);
					this.SendPropertyChanging();
					this._N_O_St = value;
					this.SendPropertyChanged("N_O_St");
					this.OnN_O_StChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPID", DbType="Int")]
		public System.Nullable<int> VIPID
		{
			get
			{
				return this._VIPID;
			}
			set
			{
				if ((this._VIPID != value))
				{
					if (this._ReaderVIP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVIPIDChanging(value);
					this.SendPropertyChanging();
					this._VIPID = value;
					this.SendPropertyChanged("VIPID");
					this.OnVIPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Comment", Storage="_Comments", ThisKey="ReaderID", OtherKey="ReaderID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Follow", Storage="_Follows", ThisKey="ReaderID", OtherKey="ReaderID")]
		public EntitySet<Follow> Follows
		{
			get
			{
				return this._Follows;
			}
			set
			{
				this._Follows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_History", Storage="_Histories", ThisKey="ReaderID", OtherKey="ReaderID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_HistoryBuy", Storage="_HistoryBuys", ThisKey="ReaderID", OtherKey="ReaderID")]
		public EntitySet<HistoryBuy> HistoryBuys
		{
			get
			{
				return this._HistoryBuys;
			}
			set
			{
				this._HistoryBuys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Reply", Storage="_Replies", ThisKey="ReaderID", OtherKey="ReaderID")]
		public EntitySet<Reply> Replies
		{
			get
			{
				return this._Replies;
			}
			set
			{
				this._Replies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Reader", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Readers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Readers.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReaderVIP_Reader", Storage="_ReaderVIP", ThisKey="VIPID", OtherKey="VIPID", IsForeignKey=true)]
		public ReaderVIP ReaderVIP
		{
			get
			{
				return this._ReaderVIP.Entity;
			}
			set
			{
				ReaderVIP previousValue = this._ReaderVIP.Entity;
				if (((previousValue != value) 
							|| (this._ReaderVIP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReaderVIP.Entity = null;
						previousValue.Readers.Remove(this);
					}
					this._ReaderVIP.Entity = value;
					if ((value != null))
					{
						value.Readers.Add(this);
						this._VIPID = value.VIPID;
					}
					else
					{
						this._VIPID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReaderVIP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
		
		private void attach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
		
		private void attach_HistoryBuys(HistoryBuy entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_HistoryBuys(HistoryBuy entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
		
		private void attach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReaderVIP")]
	public partial class ReaderVIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VIPID;
		
		private string _Name;
		
		private System.Nullable<int> _Sale;
		
		private System.Nullable<int> _DK;
		
		private EntitySet<Reader> _Readers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIPIDChanging(int value);
    partial void OnVIPIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSaleChanging(System.Nullable<int> value);
    partial void OnSaleChanged();
    partial void OnDKChanging(System.Nullable<int> value);
    partial void OnDKChanged();
    #endregion
		
		public ReaderVIP()
		{
			this._Readers = new EntitySet<Reader>(new Action<Reader>(this.attach_Readers), new Action<Reader>(this.detach_Readers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VIPID
		{
			get
			{
				return this._VIPID;
			}
			set
			{
				if ((this._VIPID != value))
				{
					this.OnVIPIDChanging(value);
					this.SendPropertyChanging();
					this._VIPID = value;
					this.SendPropertyChanged("VIPID");
					this.OnVIPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale", DbType="Int")]
		public System.Nullable<int> Sale
		{
			get
			{
				return this._Sale;
			}
			set
			{
				if ((this._Sale != value))
				{
					this.OnSaleChanging(value);
					this.SendPropertyChanging();
					this._Sale = value;
					this.SendPropertyChanged("Sale");
					this.OnSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DK", DbType="Int")]
		public System.Nullable<int> DK
		{
			get
			{
				return this._DK;
			}
			set
			{
				if ((this._DK != value))
				{
					this.OnDKChanging(value);
					this.SendPropertyChanging();
					this._DK = value;
					this.SendPropertyChanged("DK");
					this.OnDKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReaderVIP_Reader", Storage="_Readers", ThisKey="VIPID", OtherKey="VIPID")]
		public EntitySet<Reader> Readers
		{
			get
			{
				return this._Readers;
			}
			set
			{
				this._Readers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.ReaderVIP = this;
		}
		
		private void detach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.ReaderVIP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Story")]
	public partial class Story : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoryID;
		
		private System.Nullable<int> _CatID;
		
		private System.Nullable<int> _AuthorID;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _N_O_Chapter;
		
		private System.Nullable<int> _View;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<System.DateTime> _Publishdate;
		
		private System.Nullable<int> _Status;
		
		private System.Data.Linq.Binary _Cover_Img;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private System.Nullable<bool> _Vip;
		
		private System.Nullable<bool> _hot;
		
		private EntitySet<AuthorR> _AuthorRs;
		
		private EntitySet<Chapter> _Chapters;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoryIDChanging(int value);
    partial void OnStoryIDChanged();
    partial void OnCatIDChanging(System.Nullable<int> value);
    partial void OnCatIDChanged();
    partial void OnAuthorIDChanging(System.Nullable<int> value);
    partial void OnAuthorIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnN_O_ChapterChanging(System.Nullable<int> value);
    partial void OnN_O_ChapterChanged();
    partial void OnViewChanging(System.Nullable<int> value);
    partial void OnViewChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnPublishdateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishdateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnCover_ImgChanging(System.Data.Linq.Binary value);
    partial void OnCover_ImgChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    partial void OnVipChanging(System.Nullable<bool> value);
    partial void OnVipChanged();
    partial void OnhotChanging(System.Nullable<bool> value);
    partial void OnhotChanged();
    #endregion
		
		public Story()
		{
			this._AuthorRs = new EntitySet<AuthorR>(new Action<AuthorR>(this.attach_AuthorRs), new Action<AuthorR>(this.detach_AuthorRs));
			this._Chapters = new EntitySet<Chapter>(new Action<Chapter>(this.attach_Chapters), new Action<Chapter>(this.detach_Chapters));
			this._Author = default(EntityRef<Author>);
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="Int")]
		public System.Nullable<int> CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int")]
		public System.Nullable<int> AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_N_O_Chapter", DbType="Int")]
		public System.Nullable<int> N_O_Chapter
		{
			get
			{
				return this._N_O_Chapter;
			}
			set
			{
				if ((this._N_O_Chapter != value))
				{
					this.OnN_O_ChapterChanging(value);
					this.SendPropertyChanging();
					this._N_O_Chapter = value;
					this.SendPropertyChanged("N_O_Chapter");
					this.OnN_O_ChapterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[View]", Storage="_View", DbType="Int")]
		public System.Nullable<int> View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this.OnViewChanging(value);
					this.SendPropertyChanging();
					this._View = value;
					this.SendPropertyChanged("View");
					this.OnViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publishdate", DbType="Date")]
		public System.Nullable<System.DateTime> Publishdate
		{
			get
			{
				return this._Publishdate;
			}
			set
			{
				if ((this._Publishdate != value))
				{
					this.OnPublishdateChanging(value);
					this.SendPropertyChanging();
					this._Publishdate = value;
					this.SendPropertyChanged("Publishdate");
					this.OnPublishdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cover_Img", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Cover_Img
		{
			get
			{
				return this._Cover_Img;
			}
			set
			{
				if ((this._Cover_Img != value))
				{
					this.OnCover_ImgChanging(value);
					this.SendPropertyChanging();
					this._Cover_Img = value;
					this.SendPropertyChanged("Cover_Img");
					this.OnCover_ImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="Date")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vip", DbType="Bit")]
		public System.Nullable<bool> Vip
		{
			get
			{
				return this._Vip;
			}
			set
			{
				if ((this._Vip != value))
				{
					this.OnVipChanging(value);
					this.SendPropertyChanging();
					this._Vip = value;
					this.SendPropertyChanged("Vip");
					this.OnVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hot", DbType="Bit")]
		public System.Nullable<bool> hot
		{
			get
			{
				return this._hot;
			}
			set
			{
				if ((this._hot != value))
				{
					this.OnhotChanging(value);
					this.SendPropertyChanging();
					this._hot = value;
					this.SendPropertyChanged("hot");
					this.OnhotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Story_AuthorR", Storage="_AuthorRs", ThisKey="StoryID", OtherKey="StoryID")]
		public EntitySet<AuthorR> AuthorRs
		{
			get
			{
				return this._AuthorRs;
			}
			set
			{
				this._AuthorRs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Story_Chapter", Storage="_Chapters", ThisKey="StoryID", OtherKey="StoryID")]
		public EntitySet<Chapter> Chapters
		{
			get
			{
				return this._Chapters;
			}
			set
			{
				this._Chapters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Story", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Stories.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Stories.Add(this);
						this._AuthorID = value.AuthorID;
					}
					else
					{
						this._AuthorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_Story", Storage="_category", ThisKey="CatID", OtherKey="CatID", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.Stories.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.Stories.Add(this);
						this._CatID = value.CatID;
					}
					else
					{
						this._CatID = default(Nullable<int>);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorRs(AuthorR entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_AuthorRs(AuthorR entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
		
		private void attach_Chapters(Chapter entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_Chapters(Chapter entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recharge")]
	public partial class Recharge
	{
		
		private System.Nullable<int> _ReaderID;
		
		private System.Nullable<int> _Money;
		
		private System.Nullable<System.DateTime> _Deposit_date;
		
		private string _contend;
		
		public Recharge()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					this._ReaderID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Int")]
		public System.Nullable<int> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this._Money = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deposit_date", DbType="Date")]
		public System.Nullable<System.DateTime> Deposit_date
		{
			get
			{
				return this._Deposit_date;
			}
			set
			{
				if ((this._Deposit_date != value))
				{
					this._Deposit_date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contend", DbType="NVarChar(MAX)")]
		public string contend
		{
			get
			{
				return this._contend;
			}
			set
			{
				if ((this._contend != value))
				{
					this._contend = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Replies")]
	public partial class Reply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _CommentID;
		
		private System.Nullable<int> _ReaderID;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private int _RepliesID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Reader> _Reader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(System.Nullable<int> value);
    partial void OnCommentIDChanged();
    partial void OnReaderIDChanging(System.Nullable<int> value);
    partial void OnReaderIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishDateChanged();
    partial void OnRepliesIDChanging(int value);
    partial void OnRepliesIDChanged();
    #endregion
		
		public Reply()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int")]
		public System.Nullable<int> CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="Date")]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepliesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RepliesID
		{
			get
			{
				return this._RepliesID;
			}
			set
			{
				if ((this._RepliesID != value))
				{
					this.OnRepliesIDChanging(value);
					this.SendPropertyChanging();
					this._RepliesID = value;
					this.SendPropertyChanged("RepliesID");
					this.OnRepliesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Reply", Storage="_Comment", ThisKey="CommentID", OtherKey="CommentID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.Replies.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.Replies.Add(this);
						this._CommentID = value.CommentID;
					}
					else
					{
						this._CommentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Reply", Storage="_Reader", ThisKey="ReaderID", OtherKey="ReaderID", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.Replies.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.Replies.Add(this);
						this._ReaderID = value.ReaderID;
					}
					else
					{
						this._ReaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Withdraw")]
	public partial class Withdraw
	{
		
		private System.Nullable<int> _AuthorID;
		
		private System.Nullable<float> _Money;
		
		private System.Nullable<System.DateTime> _Withdrawaldate;
		
		private string _contend;
		
		public Withdraw()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int")]
		public System.Nullable<int> AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this._AuthorID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Real")]
		public System.Nullable<float> Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this._Money = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Withdrawaldate", DbType="Date")]
		public System.Nullable<System.DateTime> Withdrawaldate
		{
			get
			{
				return this._Withdrawaldate;
			}
			set
			{
				if ((this._Withdrawaldate != value))
				{
					this._Withdrawaldate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contend", DbType="NVarChar(MAX)")]
		public string contend
		{
			get
			{
				return this._contend;
			}
			set
			{
				if ((this._contend != value))
				{
					this._contend = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.story_posting_schedule")]
	public partial class story_posting_schedule
	{
		
		private System.Nullable<int> _StoryID;
		
		private System.Nullable<int> _N_O_C;
		
		private System.Nullable<int> _Status;
		
		public story_posting_schedule()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", DbType="Int")]
		public System.Nullable<int> StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					this._StoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_N_O_C", DbType="Int")]
		public System.Nullable<int> N_O_C
		{
			get
			{
				return this._N_O_C;
			}
			set
			{
				if ((this._N_O_C != value))
				{
					this._N_O_C = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
